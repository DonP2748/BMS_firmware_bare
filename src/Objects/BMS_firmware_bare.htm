<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BMS_firmware_bare.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BMS_firmware_bare.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed Feb 14 19:53:01 2024
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; bms_error_handle &rArr; rtc_get_time_stamp &rArr; rtc_get_date_time &rArr; DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from bq76940.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from timer.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[37]">balance_release_lck</a> from bms.o(.text.balance_release_lck) referenced 2 times from bms.o(.text.balance_enter_lck)
 <LI><a href="#[38]">bms_set_state_battery</a> from bms.o(.text.bms_set_state_battery) referenced 2 times from bms.o(.text.bms_error_handle)
 <LI><a href="#[39]">notify_release_lck</a> from bms.o(.text.notify_release_lck) referenced 2 times from bms.o(.text.bms_process_push_notify)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[43]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[da]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[db]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[de]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[e9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ea]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[eb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ec]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ed]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ef]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[40]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[44]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bms_error_handle &rArr; rtc_get_time_stamp &rArr; rtc_get_date_time &rArr; DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[47]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[49]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_log_handle
</UL>

<P><STRONG><a name="[4e]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_log_handle
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_transmit
</UL>

<P><STRONG><a name="[4f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f3]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>mktime</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time_stamp
</UL>

<P><STRONG><a name="[f4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[54]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[56]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[fb]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[100]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[101]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[102]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[46]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[57]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[5c]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[5d]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[aa]"></a>CAN_FilterInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f10x_can.o(.text.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_init
</UL>

<P><STRONG><a name="[a9]"></a>CAN_Init</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(.text.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_init
</UL>

<P><STRONG><a name="[ad]"></a>CAN_MessagePending</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_can.o(.text.CAN_MessagePending))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_process_receive_data
</UL>

<P><STRONG><a name="[ae]"></a>CAN_Receive</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f10x_can.o(.text.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_process_receive_data
</UL>

<P><STRONG><a name="[ab]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_can.o(.text.CAN_SlaveStartBank))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_init
</UL>

<P><STRONG><a name="[a8]"></a>CAN_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_can.o(.text.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_init
</UL>

<P><STRONG><a name="[b0]"></a>CAN_Transmit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_can.o(.text.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_transmit
</UL>

<P><STRONG><a name="[5e]"></a>DS3231_ClearOSF</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ds3231.o(.text.DS3231_ClearOSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS3231_ClearOSF &rArr; ds3231_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_write_byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
</UL>

<P><STRONG><a name="[61]"></a>DS3231_GetOSF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ds3231.o(.text.DS3231_GetOSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS3231_GetOSF &rArr; ds3231_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
</UL>

<P><STRONG><a name="[62]"></a>DS3231_GetTime</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ds3231.o(.text.DS3231_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date_time
</UL>

<P><STRONG><a name="[64]"></a>DS3231_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ds3231.o(.text.DS3231_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS3231_Init &rArr; DS3231_GetOSF &rArr; ds3231_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_write_byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_read_byte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_GetOSF
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ClearOSF
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_init_system
</UL>

<P><STRONG><a name="[65]"></a>DelayMs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(.text.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
</UL>

<P><STRONG><a name="[66]"></a>DelayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bq76940.o(.text.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>EXTI_Init</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_extint_init
</UL>

<P><STRONG><a name="[67]"></a>FLASH_ErasePage</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[6a]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[69]"></a>FLASH_ProgramWord</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[b7]"></a>FLASH_SetLatency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[68]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_extint_init
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_extint_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_init
</UL>

<P><STRONG><a name="[ce]"></a>GetMsTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text.GetMsTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_timer_events
</UL>

<P><STRONG><a name="[c4]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_nack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_ack
</UL>

<P><STRONG><a name="[bb]"></a>I2C_CheckEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_transmit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_nack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_address_direction
</UL>

<P><STRONG><a name="[be]"></a>I2C_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_init
</UL>

<P><STRONG><a name="[c7]"></a>I2C_GenerateSTART</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
</UL>

<P><STRONG><a name="[c8]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_stop
</UL>

<P><STRONG><a name="[c6]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
</UL>

<P><STRONG><a name="[6b]"></a>I2C_Init</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, stm32f10x_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_init
</UL>

<P><STRONG><a name="[c5]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_nack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_ack
</UL>

<P><STRONG><a name="[ba]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_address_direction
</UL>

<P><STRONG><a name="[c9]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_transmit
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_extint_init
</UL>

<P><STRONG><a name="[bd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_init
</UL>

<P><STRONG><a name="[99]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_extint_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_init
</UL>

<P><STRONG><a name="[6c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[6f]"></a>SysTickInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(.text.SysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTickInit &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, timer.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, system_stm32f10x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>bms_auto_adjusts_temp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bms.o(.text.bms_auto_adjusts_temp))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>bms_auto_balancing</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, bms.o(.text.bms_auto_balancing))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bms_auto_balancing &rArr; bms_update_info &rArr; bq76940_read_all_cell_voltage &rArr; bq76940_read_cell_voltage &rArr; bq76940_read_word &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_clear_balance_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_cell_balancing
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_check_cell_valid
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;balance_enter_lck
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>bms_error_handle</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bms.o(.text.bms_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bms_error_handle &rArr; rtc_get_time_stamp &rArr; rtc_get_date_time &rArr; DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time_stamp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_save_data
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_transmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_discharger
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_charger
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_error_check
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_get_flag
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_clear_flag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>bms_init_system</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bms.o(.text.bms_init_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bms_init_system &rArr; bq76940_init &rArr; bq76940_set_ov_trip &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>bms_process_push_notify</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bms.o(.text.bms_process_push_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bms_process_push_notify &rArr; start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_transmit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>bms_receive_data_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bms.o(.text.bms_receive_data_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bms_receive_data_callback &rArr; bms_cmd_state_handle &rArr; bms_set_state_battery &rArr; bq76940_set_discharger &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_state_handle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_log_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_process_receive_data
</UL>

<P><STRONG><a name="[90]"></a>bq34z100_get_average_current</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq34z100.o(.text.bq34z100_get_average_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq34z100_get_average_current &rArr; bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[8c]"></a>bq34z100_get_flags</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq34z100.o(.text.bq34z100_get_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq34z100_get_flags &rArr; bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[91]"></a>bq34z100_get_power</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq34z100.o(.text.bq34z100_get_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq34z100_get_power &rArr; bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[92]"></a>bq34z100_get_soc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq34z100.o(.text.bq34z100_get_soc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq34z100_get_soc &rArr; bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[93]"></a>bq34z100_get_soh</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq34z100.o(.text.bq34z100_get_soh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq34z100_get_soh &rArr; bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[8f]"></a>bq34z100_get_temperature</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq34z100.o(.text.bq34z100_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq34z100_get_temperature &rArr; bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[83]"></a>bq76940_alert_clear_flag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_alert_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_alert_clear_flag &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
</UL>

<P><STRONG><a name="[7f]"></a>bq76940_alert_get_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bq76940.o(.text.bq76940_alert_get_flag))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
</UL>

<P><STRONG><a name="[79]"></a>bq76940_cell_balancing</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bq76940.o(.text.bq76940_cell_balancing))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bq76940_cell_balancing &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_balancing
</UL>

<P><STRONG><a name="[77]"></a>bq76940_clear_balance_reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bq76940.o(.text.bq76940_clear_balance_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bq76940_clear_balance_reg &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_balancing
</UL>

<P><STRONG><a name="[80]"></a>bq76940_error_check</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_error_check &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
</UL>

<P><STRONG><a name="[8a]"></a>bq76940_get_charger</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_get_charger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_get_charger &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[8b]"></a>bq76940_get_discharger</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_get_discharger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_get_discharger &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[87]"></a>bq76940_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bq76940_init &rArr; bq76940_set_ov_trip &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_ov_trip
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_adc_offset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_adc_gain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_extint_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_init_system
</UL>

<P><STRONG><a name="[9f]"></a>bq76940_read_adc_gain</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_read_adc_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_read_adc_gain &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
</UL>

<P><STRONG><a name="[a0]"></a>bq76940_read_adc_offset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_read_adc_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_read_adc_offset &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
</UL>

<P><STRONG><a name="[8e]"></a>bq76940_read_all_cell_voltage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bq76940.o(.text.bq76940_read_all_cell_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bq76940_read_all_cell_voltage &rArr; bq76940_read_cell_voltage &rArr; bq76940_read_word &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_cell_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[a2]"></a>bq76940_read_cell_voltage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_read_cell_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bq76940_read_cell_voltage &rArr; bq76940_read_word &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_all_cell_voltage
</UL>

<P><STRONG><a name="[8d]"></a>bq76940_read_pack_voltage</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_read_pack_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bq76940_read_pack_voltage &rArr; bq76940_read_word &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_update_info
</UL>

<P><STRONG><a name="[81]"></a>bq76940_set_charger</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_set_charger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_set_charger &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_set_state_battery
</UL>

<P><STRONG><a name="[82]"></a>bq76940_set_discharger</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_set_discharger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_set_discharger &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_set_state_battery
</UL>

<P><STRONG><a name="[a1]"></a>bq76940_set_ov_trip</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bq76940.o(.text.bq76940_set_ov_trip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bq76940_set_ov_trip &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage2ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
</UL>

<P><STRONG><a name="[a7]"></a>canbus_init</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, canbus.o(.text.canbus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = canbus_init &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SlaveStartBank
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>canbus_process_receive_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, canbus.o(.text.canbus_process_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = canbus_process_receive_data &rArr; bms_receive_data_callback &rArr; bms_cmd_state_handle &rArr; bms_set_state_battery &rArr; bq76940_set_discharger &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessagePending
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_receive_data_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>canbus_transmit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, canbus.o(.text.canbus_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = canbus_transmit &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_process_push_notify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_log_handle
</UL>

<P><STRONG><a name="[a3]"></a>crc8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, crc8.o(.text.crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>

<P><STRONG><a name="[5f]"></a>ds3231_read_byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds3231.o(.text.ds3231_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ds3231_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_GetOSF
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ClearOSF
</UL>

<P><STRONG><a name="[60]"></a>ds3231_write_byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ds3231.o(.text.ds3231_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ds3231_write_byte &rArr; hwi2c_write_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ClearOSF
</UL>

<P><STRONG><a name="[b2]"></a>flash_erase_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(.text.flash_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_erase_page &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_save_data
</UL>

<P><STRONG><a name="[b5]"></a>flash_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(.text.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>flash_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(.text.flash_read))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_load_data
</UL>

<P><STRONG><a name="[b8]"></a>flash_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flash.o(.text.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_write &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_save_data
</UL>

<P><STRONG><a name="[bc]"></a>hwi2c_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hwi2c.o(.text.hwi2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hwi2c_init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>hwi2c_read_byte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_transmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_nack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_address_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_byte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_read_byte
</UL>

<P><STRONG><a name="[63]"></a>hwi2c_read_sequence</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hwi2c.o(.text.hwi2c_read_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_transmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_nack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_receive_ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_address_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_GetTime
</UL>

<P><STRONG><a name="[b1]"></a>hwi2c_write_byte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwi2c_write_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_transmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_address_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds3231_write_byte
</UL>

<P><STRONG><a name="[a6]"></a>hwi2c_write_sequence</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hwi2c.o(.text.hwi2c_write_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_transmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_address_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_write_byte
</UL>

<P><STRONG><a name="[ca]"></a>log_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(.text.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_init &rArr; flash_erase_page &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>log_load_data</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, log.o(.text.log_load_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = log_load_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_log_handle
</UL>

<P><STRONG><a name="[85]"></a>log_save_data</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, log.o(.text.log_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = log_save_data &rArr; flash_write &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; bms_error_handle &rArr; rtc_get_time_stamp &rArr; rtc_get_date_time &rArr; DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_process_receive_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_process_push_notify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_init_system
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_balancing
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_adjusts_temp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_timer_events
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cd]"></a>process_timer_events</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, systimer.o(.text.process_timer_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_timer_events
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>rtc_get_date_time</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rtc.o(.text.rtc_get_date_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_get_date_time &rArr; DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time_stamp
</UL>

<P><STRONG><a name="[84]"></a>rtc_get_time_stamp</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, rtc.o(.text.rtc_get_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rtc_get_time_stamp &rArr; rtc_get_date_time &rArr; DS3231_GetTime &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_date_time
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
</UL>

<P><STRONG><a name="[74]"></a>start_timer</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, systimer.o(.text.start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_process_push_notify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_error_handle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;balance_enter_lck
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>balance_enter_lck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bms.o(.text.balance_enter_lck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = balance_enter_lck &rArr; start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_balancing
</UL>

<P><STRONG><a name="[37]"></a>balance_release_lck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bms.o(.text.balance_release_lck))
<BR>[Address Reference Count : 1]<UL><LI> bms.o(.text.balance_enter_lck)
</UL>
<P><STRONG><a name="[7a]"></a>bms_cmd_log_handle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bms.o(.text.bms_cmd_log_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bms_cmd_log_handle &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_load_data
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canbus_transmit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_receive_data_callback
</UL>

<P><STRONG><a name="[7d]"></a>bms_cmd_state_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bms.o(.text.bms_cmd_state_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bms_cmd_state_handle &rArr; bms_set_state_battery &rArr; bq76940_set_discharger &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_set_state_battery
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_receive_data_callback
</UL>

<P><STRONG><a name="[38]"></a>bms_set_state_battery</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bms.o(.text.bms_set_state_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bms_set_state_battery &rArr; bq76940_set_discharger &rArr; bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_discharger
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_charger
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_cmd_state_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bms.o(.text.bms_error_handle)
</UL>
<P><STRONG><a name="[76]"></a>bms_update_info</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, bms.o(.text.bms_update_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bms_update_info &rArr; bq76940_read_all_cell_voltage &rArr; bq76940_read_cell_voltage &rArr; bq76940_read_word &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_pack_voltage
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_all_cell_voltage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_get_discharger
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_get_charger
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_temperature
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_soh
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_soc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_power
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_flags
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_average_current
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_balancing
</UL>

<P><STRONG><a name="[78]"></a>group_check_cell_valid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bms.o(.text.group_check_cell_valid))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bms_auto_balancing
</UL>

<P><STRONG><a name="[39]"></a>notify_release_lck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bms.o(.text.notify_release_lck))
<BR>[Address Reference Count : 1]<UL><LI> bms.o(.text.bms_process_push_notify)
</UL>
<P><STRONG><a name="[b9]"></a>hwi2c_address_direction</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_address_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwi2c_address_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_sequence
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>

<P><STRONG><a name="[c3]"></a>hwi2c_receive_ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_receive_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwi2c_receive_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
</UL>

<P><STRONG><a name="[c1]"></a>hwi2c_receive_nack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_receive_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwi2c_receive_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>

<P><STRONG><a name="[bf]"></a>hwi2c_start</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwi2c_start &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_sequence
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>

<P><STRONG><a name="[c2]"></a>hwi2c_stop</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_sequence
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>

<P><STRONG><a name="[c0]"></a>hwi2c_transmit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hwi2c.o(.text.hwi2c_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwi2c_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_sequence
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>

<P><STRONG><a name="[71]"></a>SysTick_Config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
</UL>

<P><STRONG><a name="[72]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[a5]"></a>Voltage2ADC</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bq76940.o(.text.Voltage2ADC))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_ov_trip
</UL>

<P><STRONG><a name="[98]"></a>bq76940_alert_extint_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bq76940.o(.text.bq76940_alert_extint_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bq76940_alert_extint_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
</UL>

<P><STRONG><a name="[9e]"></a>bq76940_read_byte</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bq76940.o(.text.bq76940_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_adc_offset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_adc_gain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_word
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_discharger
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_charger
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_get_discharger
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_get_charger
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_error_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_cell_balancing
</UL>

<P><STRONG><a name="[a4]"></a>bq76940_read_word</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bq76940.o(.text.bq76940_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bq76940_read_word &rArr; bq76940_read_byte &rArr; hwi2c_read_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_cell_voltage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_read_pack_voltage
</UL>

<P><STRONG><a name="[97]"></a>bq76940_write_byte</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bq76940.o(.text.bq76940_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bq76940_write_byte &rArr; hwi2c_write_sequence &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_write_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_ov_trip
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_discharger
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_set_charger
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_clear_balance_reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_cell_balancing
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq76940_alert_clear_flag
</UL>

<P><STRONG><a name="[95]"></a>bq34z100_read_byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bq34z100.o(.text.bq34z100_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwi2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_word
</UL>

<P><STRONG><a name="[94]"></a>bq34z100_read_word</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bq34z100.o(.text.bq34z100_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bq34z100_read_word &rArr; bq34z100_read_byte &rArr; hwi2c_read_byte &rArr; hwi2c_stop &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_temperature
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_soh
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_soc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_power
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_flags
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq34z100_get_average_current
</UL>

<P><STRONG><a name="[6d]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6e]"></a>SetSysClockTo72</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[52]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
